{"version":3,"sources":["women.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getNewQuote","getQuote","state","quote","author","position","this","axios","get","then","res","data","console","log","quoteNum","Math","floor","random","length","randomQuote","setState","id","src","require","alt","className","href","target","rel","title","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,mC,qICqF5BC,G,kBAhFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA6BVC,YAAc,WACV,EAAKC,YA7BL,EAAKC,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRC,SAAU,IALC,E,iFASfC,KAAKL,a,iCAEG,IAAD,OAIPM,IAAMC,IAFF,uFAEWC,MAAK,SAAAC,GAChB,IAAIC,EAAOD,EAAIC,KACfC,QAAQC,IAAIF,GACZ,IAAIG,EAAWC,KAAKC,MAAMD,KAAKE,SAAWN,EAAKO,QAC/CN,QAAQC,IAAIC,GACZ,IAAIK,EAAcR,EAAKG,GACvBF,QAAQC,IAAIM,GAEZ,EAAKC,SAAS,CACVjB,MAAOgB,EAAW,MAClBf,OAAQe,EAAW,OACnBd,SAAUc,EAAW,gB,+BAQvB,IAAD,EAC+Bb,KAAKJ,MAAjCC,EADH,EACGA,MAAOC,EADV,EACUA,OAAQC,EADlB,EACkBA,SACvB,OACI,yBAAKgB,GAAG,WACJ,yBAAKA,GAAG,SACJ,yBACIC,IAAKC,EAAQ,IACbC,IAAI,+BAGZ,wBAAIC,UAAU,SAAd,gCAEA,yBAAKJ,GAAG,aACJ,yBAAKA,GAAG,QACJ,2BAAIlB,IAER,yBAAKkB,GAAG,UACJ,4BACKjB,EADL,KACeC,IAGnB,yBAAKgB,GAAG,WACJ,uBACIA,GAAG,cACHK,KAAI,gDAA2CvB,EAA3C,YAAoDC,GACxDuB,OAAO,SACPC,IAAI,sBACJC,MAAM,+BAEN,0CAGJ,4BACIR,GAAG,YACHI,UAAU,UACVK,QAASxB,KAAKN,aAHlB,oB,GAnEN+B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.27121d03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/women.bf4f92c7.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: \"\",\n            author: \"\",\n            position: \"\"\n        };\n    }\n    componentDidMount() {\n        this.getQuote();\n    }\n    getQuote() {\n        let url =\n            \"https://raw.githubusercontent.com/lalawuhan/quote-generator-data/master/quotes.json\";\n\n        axios.get(url).then(res => {\n            let data = res.data;\n            console.log(data);\n            let quoteNum = Math.floor(Math.random() * data.length);\n            console.log(quoteNum);\n            let randomQuote = data[quoteNum];\n            console.log(randomQuote);\n\n            this.setState({\n                quote: randomQuote[\"quote\"],\n                author: randomQuote[\"author\"],\n                position: randomQuote[\"position\"]\n            });\n        });\n    }\n    getNewQuote = () => {\n        this.getQuote();\n    };\n\n    render() {\n        const { quote, author, position } = this.state;\n        return (\n            <div id=\"wrapper\">\n                <div id=\"image\">\n                    <img\n                        src={require(\"./women.svg\")}\n                        alt=\"women sketch holding flag\"\n                    />\n                </div>\n                <h1 className=\"title\">Inspirational Women in Tech.</h1>\n\n                <div id=\"quote-box\">\n                    <div id=\"text\">\n                        <p>{quote}</p>\n                    </div>\n                    <div id=\"author\">\n                        <h5>\n                            {author}, {position}\n                        </h5>\n                    </div>\n                    <div id=\"buttons\">\n                        <a\n                            id=\"tweet-quote\"\n                            href={`https://twitter.com/intent/tweet?text=${quote} ${author}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            title=\"Post this quote on twitter!\"\n                        >\n                            <button>Tweet</button>\n                        </a>\n\n                        <button\n                            id=\"new-quote\"\n                            className=\"buttons\"\n                            onClick={this.getNewQuote}\n                        >\n                            New Quote\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}